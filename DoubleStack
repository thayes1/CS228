// Tyler Hayes
//Helped by Kyla Fielding

#include "DoubleStack.h"
#include <iostream>

// Default constructor, the stack is empty to start
DoubleStack::DoubleStack() {
// Insert your code here 
    headA = NULL;
    headB = NULL;
}

// Default destructor
DoubleStack::~DoubleStack() {
// Insert your code here 
    if (headA == NULL)
        throw 0;

    popA() {
        char x;
        x = headA->data;
        headA = headA->next; 
        return x;
    }
    
    popB() {
        char x;
        x = headB->data;
        headB = headB->next;

        return x;
    }
}

// Add "value" to the top of stack A
void DoubleStack::PushA(char value) {
// Insert your code here 
    if (!isalpha(value))
        throw 0;
    Node* newNode = new Node;   //Creating a new node & allocating space
    newNode->data = value;      //Node's data is assigned the value
    newNode->next = headA;      
    headA = newNode;
}

// Add "value" to the top of stack B
void DoubleStack::PushB(char value) {
// Insert your code here
    if (!isalpha(value))
        throw 0;
    Node* newNode = new Node;
    newNode->data = value;
    newNode->next = headB;
    headB = newNode;
}

// Remove and return the item on the top of stack A
char DoubleStack::PopA() {
// Insert your code here 
    if (headA == NULL) 
        throw 0;
    char x;
    x = headA->data;
    headA = headA->next;
    return x;
}

// Remove and return the item on the top of stack B
char DoubleStack::PopB() {
// Insert your code here 
    if (headB == NULL)
        throw 0;
    char x;
    x = headB->data;
    headB = headB->next;
    return x;
}

// Return the item on the top of stack A
char DoubleStack::TopA() {
// Insert your code here 
    if (headA == NULL)
        throw 0;
    return headA->data;
}

// Return the item on the top of stack B
char DoubleStack::TopB() {
// Insert your code here 
    if (headB == NULL)
        throw 0;
    return headB->data;
}


// Return the number of items in the stack
unsigned int DoubleStack::size() {
// Insert your code here 
    if (headA == NULL)
        throw 0
    int counter;
    counter = 0;
    Node* current = headA;
    while (current != NULL) {
        counter++;
        current = current->next;
    }
    
    current = headB;
    while (current != NULL) {
        counter++;
        current = current->next;
    }
    return counter;
}
